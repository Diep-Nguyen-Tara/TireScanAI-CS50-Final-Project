import SwiftUI
import UIKit
import Foundation
import GoogleAPIClientForREST_Vision

struct ImagePicker: UIViewControllerRepresentable {
    @Binding var selectedImage: UIImage?
    @Environment(\.presentationMode) var presentationMode
    var onImagePicked: (UIImage) -> Void
    var onSearchForTires: () -> Void
        
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
        
    class Coordinator: NSObject, UINavigationControllerDelegate, UIImagePickerControllerDelegate {
        var parent: ImagePicker
            
        init(_ parent: ImagePicker) {
            self.parent = parent
        }
            
        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
            if let image = info[.originalImage] as? UIImage {
                parent.selectedImage = image
                parent.onImagePicked(image)
            }
            parent.presentationMode.wrappedValue.dismiss()
        }
            
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
            parent.presentationMode.wrappedValue.dismiss()
        }
            
    }
        
    func makeUIViewController(context: UIViewControllerRepresentableContext<ImagePicker>) -> UIImagePickerController {
        let imagePicker = UIImagePickerController()
        imagePicker.sourceType = .camera
        imagePicker.delegate = context.coordinator
        return imagePicker
    }
        
    func updateUIViewController(_ uiViewController: UIImagePickerController, context: UIViewControllerRepresentableContext<ImagePicker>) {
            // Nothing to do here
    }
}

class Coordinator: NSObject, UINavigationControllerDelegate, UIImagePickerControllerDelegate {
    var parent: ImagePicker
    
    init(_ parent: ImagePicker) {
        self.parent = parent
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        if let image = info[.originalImage] as? UIImage {
            parent.selectedImage = image
            parent.onImagePicked(image)
            parent.onSearchForTires() // Call the closure here
        }
        parent.presentationMode.wrappedValue.dismiss()
    }
}

extension Color {
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }
        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue:  Double(b) / 255,
            opacity: Double(a) / 255
        )
    }
}

struct ContentView: View {
    @State private var isShowingImagePicker = false
    @State private var selectedImage: UIImage?
    @State private var tireSize: String = ""
    @State private var tireRatio: String = ""
    @State private var tireRadius: String = ""
    @State private var showResultsView = false
    @State private var apiResult: String = "" // Store the API result here
    @State private var isLoading = false
    
    
    func searchForTires(size: String, ratio: String, radius: String) {
        // Implement your tire searching logic here
        self.apiResult = "Searched for tires with size: \(size), ratio: \(ratio), radius: \(radius)"
        self.showResultsView = true
    }
    
    func processImageForTextRecognition(_ image: UIImage) {
        self.isLoading = true // Start loading
        // Convert image to base64 string
        guard let imageData = image.jpegData(compressionQuality: 0.8) else {
            self.isLoading = false // Stop loading indicator in case of error
            return
        }
        let base64EncodedImage = imageData.base64EncodedString(options: .endLineWithCarriageReturn)
        
        // Construct the API request
        let jsonRequest: [String: Any] = [
            "requests": [
                "image": ["content": base64EncodedImage],
                "features": [["type": "TEXT_DETECTION"]]
            ]
        ]
        
        // Convert request to JSON data
        guard let jsonData = try? JSONSerialization.data(withJSONObject: jsonRequest, options: []) else {
            self.isLoading = false // Stop loading indicator in case of error
            return
        }
        
        // Set up the URL and URLRequest
        let urlString = "https://vision.googleapis.com/v1/images:annotate?key=AIzaSyBVDbEs6SizW7n4R0RM76l-QpbE8pgWp1c"
        guard let url = URL(string: urlString) else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.httpBody = jsonData
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // Perform the API request
        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                self.isLoading = false // Trigger navigation to ResultsView
            }
            
            if let error = error {
                DispatchQueue.main.async {
                    print("Network request error: \(error.localizedDescription)")
                    self.apiResult = "Error: \(error.localizedDescription)"
                    self.showResultsView = true
                }
                return
            }
            
            guard let data = data else {
                DispatchQueue.main.async {
                    print("No data received from the API")
                    self.apiResult = "Error: Data not found"
                    self.showResultsView = true
                }
                return
            }
            
            // Parse the response
            do {
                if let jsonResponse = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any],
                   let responses = jsonResponse["responses"] as? [[String: Any]],
                   let response = responses.first,
                   let textAnnotations = response["textAnnotations"] as? [[String: Any]],
                   let firstAnnotation = textAnnotations.first,
                   let detectedText = firstAnnotation["description"] as? String {
                    
                    DispatchQueue.main.async {
                        self.apiResult = detectedText
                        self.showResultsView = true // Trigger navigation to ResultsView
                    }
                }
            } catch {
                DispatchQueue.main.async {
                    print("JSON Parsing Error: \(error.localizedDescription)")
                    self.apiResult = "Error: \(error.localizedDescription)"
                    self.showResultsView = true
                }
            }
            
            // Handle the API response...
            // Update your UI accordingly...
        }.resume()
    }
    
    var body: some View {
        NavigationStack {
            GeometryReader { geo in
                ZStack{
                    Image("Mainbg")
                        .resizable()
                        .scaledToFill()
                        .edgesIgnoringSafeArea(.all)
                        .frame(width:  geo.size.width, height: geo.size.height, alignment: Alignment(horizontal: .trailing, vertical: .center))
                        . opacity(1.0)
                    if isLoading {
                        ProgressView("Sending image...")
                            .progressViewStyle(CircularProgressViewStyle())
                    } else {
                        
                        VStack {
                            Spacer()
                                .frame(height: geo.size.height * 0.045) // Adjust this value to move the text up or down
                            
                            Text("TireScan AI")
                                .font(.system(size: 60))
                                .fontWeight(.bold)
                                .foregroundColor(.white)
                                .multilineTextAlignment(.center)
                            
                            Spacer()
                                .frame(height: geo.size.height * 0.055) // Adjust this value to move the text up or down
                            
                            Text("By Diep Nguyen")
                                .lineLimit(1)
                                .font(.system(size: 20))
                                .fontWeight(.bold)
                                .foregroundColor(.white)
                                .multilineTextAlignment(.center)
                                .background(Color(hex: "14354A"))
                                .cornerRadius(50)
                            
                            Text("Harvard CS50 Final Project")
                                .lineLimit(1)
                                .font(.system(size: 13))
                                .fontWeight(.bold)
                                .foregroundColor(.white)
                                .multilineTextAlignment(.center)
                                .background(Color(hex: "14354A"))
                                .cornerRadius(50)
                            
                            Spacer()
                                .frame(height: geo.size.height * 0.47)// This spacer will push the button down. Adjust its size as needed.
                            
                            Button(action: {
                                self.isShowingImagePicker = true
                            }
                            ) {
                                Text("Press To Scan Tire")
                                    .font(.title)
                                    .foregroundColor(.white)
                                    .padding()
                                    .background(Color(hex: "14354A"))
                                    .cornerRadius(50)
                            }
                            .frame(width: geo.size.width * 0.8, height: 80, alignment: .center) // Adjust width and height as needed
                            .sheet(isPresented: $isShowingImagePicker) {
                                ImagePicker(selectedImage: $selectedImage,
                                            onImagePicked: { image in
                                                self.processImageForTextRecognition(image)
                                },
                                onSearchForTires: {
                                    self.isLoading = true
                                })
                            }
                            
                            Spacer() // You can adjust or remove this spacer based on how much space you want at the bottom
                            if !tireSize.isEmpty && !tireRatio.isEmpty && !tireRadius.isEmpty {
                                Button("Search for Tires") {
                                    searchForTires(size: tireSize, ratio: tireRatio, radius: tireRadius)
                                }
                                .foregroundColor(.blue)
                            }
                        }
                        
                    }
                }
                Button("Show Results") {
                    self.apiResult = "Test Result"
                    self.showResultsView = true
                }
            }
            .navigationDestination(isPresented: $showResultsView) {
                // Destination view when showResultsView is true
                ResultsView(result: apiResult)
            }
        }

    }
    

    }
    
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
